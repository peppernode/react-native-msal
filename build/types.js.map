{"version":3,"file":"types.js","sourceRoot":"","sources":["../src/types.ts"],"names":[],"mappings":"AAgJA;;;GAGG;AACH,MAAM,CAAN,IAAY,cAwBX;AAxBD,WAAY,cAAc;IACxB;;;OAGG;IACH,uEAAc,CAAA;IACd;;OAEG;IACH,qDAAK,CAAA;IACL;;OAEG;IACH,yDAAO,CAAA;IACP;;;;OAIG;IACH,qEAAa,CAAA;IACb;;OAEG;IACH,yDAAuB,CAAA;AACzB,CAAC,EAxBW,cAAc,KAAd,cAAc,QAwBzB;AAyHD;;GAEG;AACH,MAAM,CAAN,IAAY,0BAYX;AAZD,WAAY,0BAA0B;IACpC,uFAAc,CAAA;IACd,qFAAS,CAAA;IACT,qFAAS,CAAA;IACT,+FAAc,CAAA;IACd,+EAAM,CAAA;IACN,+FAAc,CAAA;IACd,uGAAkB,CAAA;IAClB,iFAAO,CAAA;IACP,uGAAkB,CAAA;IAClB,4EAAS,CAAA;IACT,sFAAc,CAAA;AAChB,CAAC,EAZW,0BAA0B,KAA1B,0BAA0B,QAYrC;AAED;;GAEG;AACH,MAAM,CAAN,IAAY,mBAKX;AALD,WAAY,mBAAmB;IAC7B,mEAAW,CAAA;IACX,iGAAsB,CAAA;IACtB,iGAAsB,CAAA;IACtB,2EAAW,CAAA;AACb,CAAC,EALW,mBAAmB,KAAnB,mBAAmB,QAK9B","sourcesContent":["import type { Configuration } from '@azure/msal-browser';\n\nexport interface IPublicClientApplication {\n  /**\n   * Acquire a token interactively\n   * @param {MSALInteractiveParams} params\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n  acquireToken(params: MSALInteractiveParams): Promise<MSALResult | undefined>;\n\n  /**\n   * Acquire a token silently\n   * @param {MSALSilentParams} params - Includes the account identifer retrieved from a\n   * previous interactive login\n   * @return Result containing an access token and account identifier\n   * used for acquiring subsequent tokens silently\n   */\n  acquireTokenSilent(params: MSALSilentParams): Promise<MSALResult | undefined>;\n\n  /**\n   * Get all accounts for which this application has refresh tokens\n   * @return Promise containing array of MSALAccount objects for which this application\n   * has refresh tokens.\n   */\n  getAccounts(): Promise<MSALAccount[]>;\n\n  /**\n   * Retrieve the account matching the identifier\n   * @return Promise containing MSALAccount object\n   */\n  getAccount(accountIdentifier: string): Promise<MSALAccount | undefined>;\n\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account.\n   * @param {MSALAccount} account\n   * @return A promise containing a boolean = true if account removal was successful\n   * otherwise rejects\n   */\n  removeAccount(account: MSALAccount): Promise<boolean>;\n\n  /**\n   * Removes all tokens from the cache for this application for the provided\n   * account. Additionally, this will remove the account from the system browser.\n   * NOTE: iOS only. On Android and web this is the same as `removeAccount`.\n   * @param {MSALSignoutParams} params\n   * @return A promise which resolves if sign out is successful,\n   * otherwise rejects\n   * @platform ios\n   */\n  signOut(params: MSALSignoutParams): Promise<boolean>;\n}\n\nexport interface MSALConfiguration {\n  auth: {\n    /**\n     * The client ID of the application, this should come from the app developer portal.\n     */\n    clientId: string;\n    /**\n     * The authority the application will use to obtain tokens.\n     */\n    authority?: string;\n    /**\n     * List of known authorities that the application should trust.\n     */\n    knownAuthorities?: string[];\n    /**\n     * The redirect URI of the application.\n     *\n     * If you are providing this property, you should probably use `Platform.select`,\n     * because the redirect uris will be different for each platform.\n     */\n    redirectUri?: string;\n  };\n  /**\n   * @platform web\n   */\n  cache?: Configuration['cache'] & { cacheLocation?: 'localStorage' | 'sessionStorage' };\n  /**\n   * Options as described here: {@link https://docs.microsoft.com/en-us/azure/active-directory/develop/msal-configuration}\n   * @platform android\n   */\n  androidConfigOptions?: MSALAndroidConfigOptions;\n}\n\nexport interface MSALAndroidConfigOptions {\n  authorization_user_agent?: 'DEFAULT' | 'BROWSER' | 'WEBVIEW';\n  broker_redirect_uri_registered?: boolean;\n  browser_safelist?: {\n    browser_package_name: string;\n    browser_signature_hashes: string[];\n    browser_use_customTab: boolean;\n  }[];\n  http?: {\n    connect_timeout?: number;\n    read_timeout?: number;\n  };\n  logging?: {\n    pii_enabled?: boolean;\n    log_level?: 'ERROR' | 'WARNING' | 'INFO' | 'VERBOSE';\n    logcat_enabled?: boolean;\n  };\n  multiple_clouds_supported?: boolean;\n}\n\nexport interface MSALInteractiveParams {\n  /**\n   * Permissions you want included in the access token received in the result.\n   * Not all scopes are guaranteed to be included in the access token returned.\n   */\n  scopes: string[];\n  /**\n   * The authority that MSAL will use to obtain tokens. If not included, authority from\n   * MSALConfiguration will be used.\n   */\n  authority?: string;\n  /**\n   * A specific prompt type for the interactive authentication flow.\n   */\n  promptType?: MSALPromptType;\n  /**\n   * A loginHint (usually an email) to pass to the service at the beginning of the\n   * interactive authentication flow. The account returned is not guaranteed to match\n   * the loginHint.\n   */\n  loginHint?: string;\n  /**\n   * Key-value pairs to pass to the /authorize and /token endpoints.\n   */\n  extraQueryParameters?: Record<string, string>;\n  /**\n   * Permissions you want the account to consent to in the same authentication flow,\n   * but won’t be included in the returned access token.\n   */\n  extraScopesToConsent?: string[];\n  /**\n   * User Interface configuration that MSAL uses when getting a token interactively or\n   * authorizing an end user.\n   */\n  webviewParameters?: MSALWebviewParams;\n}\n\n/**\n * OIDC prompt parameter that specifies whether the Authorization Server prompts the\n * End-User for reauthentication and consent.\n */\nexport enum MSALPromptType {\n  /**\n   * If no user is specified the authentication webview will present a list of users\n   * currently signed in for the user to select among.\n   */\n  SELECT_ACCOUNT,\n  /**\n   * Require the user to authenticate in the webview.\n   */\n  LOGIN,\n  /**\n   * Require the user to consent to the current set of scopes for the request.\n   */\n  CONSENT,\n  /**\n   * The SSO experience will be determined by the presence of cookies in the webview and\n   * account type. User won’t be prompted unless necessary. If multiple users are signed in,\n   * select account experience will be presented.\n   */\n  WHEN_REQUIRED,\n  /**\n   * Default is MSALPromptType.WHEN_REQUIRED.\n   */\n  DEFAULT = WHEN_REQUIRED,\n}\n\nexport interface MSALSilentParams {\n  /**\n   * Permissions you want included in the access token received in the result.\n   * Not all scopes are guaranteed to be included in the access token returned.\n   */\n  scopes: string[];\n  /**\n   * An account object for which tokens should be returned.\n   */\n  account: MSALAccount;\n  /**\n   * The authority that MSAL will use to obtain tokens. If not included, authority from\n   * MSALConfiguration will be used.\n   */\n  authority?: string;\n  /**\n   * Ignore any existing access token in the cache and force MSAL to get a new access token\n   * from the service.\n   */\n  forceRefresh?: boolean;\n}\n\nexport interface MSALSignoutParams {\n  /**\n   * The account object for which to sign out of.\n   */\n  account: MSALAccount;\n  /**\n   * Specifies whether signout should also open the browser and send a network request to the end_session_endpoint.\n   * false by default.\n   */\n  signoutFromBrowser?: boolean;\n  /**\n   * User Interface configuration that MSAL uses when getting a token interactively or\n   * authorizing an end user.\n   */\n  webviewParameters?: MSALWebviewParams;\n}\n\nexport interface MSALResult {\n  /**\n   * The Access Token requested, or empty string if no access token is returned in response\n   */\n  accessToken: string;\n  /**\n   * The account object that holds account information.\n   */\n  account: MSALAccount;\n  /**\n   * The time that the access token returned in the accessToken property ceases to be valid.\n   * This value is calculated based on current UTC time measured locally and the value expiresIn returned from the service\n   */\n  expiresOn: number;\n  /**\n   * The raw id token if it’s returned by the service or undefined if no id token is returned.\n   */\n  idToken?: string;\n  /**\n   * The scope values returned from the service.\n   */\n  scopes: string[];\n  /**\n   * Identifier for the directory where account is locally represented\n   */\n  tenantId?: string;\n}\n\nexport interface MSALAccount {\n  /**\n   * Unique identifier for the account.\n   */\n  identifier: string;\n  /**\n   * Host part of the authority string used for authentication based on the issuer identifier.\n   */\n  environment?: string;\n  /**\n   * An identifier for the AAD tenant that the account was acquired from.\n   */\n  tenantId: string;\n  /**\n   * Shorthand name by which the End-User wishes to be referred to at the RP, such as janedoe or j.doe.\n   */\n  username: string;\n  /**\n   * ID token claims for the account. Can be used to read additional information about the account, e.g. name.\n   */\n  claims?: object;\n}\n\n/**\n * Mostly, if not all, iOS webview parameters\n * See https://azuread.github.io/microsoft-authentication-library-for-objc/Classes/MSALWebviewParameters.html\n */\nexport interface MSALWebviewParams {\n  /**\n   * A Boolean value that indicates whether the ASWebAuthenticationSession should ask the\n   * browser for a private authentication session.\n   * For more info see here: https://developer.apple.com/documentation/authenticationservices/aswebauthenticationsession/3237231-prefersephemeralwebbrowsersessio?language=objc\n   * @platform iOS 13+\n   */\n  ios_prefersEphemeralWebBrowserSession?: boolean;\n  /**\n   * MSAL requires a web browser for interactive authentication.\n   * There are multiple web browsers available to complete authentication.\n   * MSAL will default to the web browser that provides best security and user experience for a given platform.\n   * Ios_MSALWebviewType allows changing the experience by customizing the configuration to other options for\n   * displaying web content\n   * @platform iOS\n   */\n  ios_webviewType?: Ios_MSALWebviewType;\n  /**\n   * Note: Has no effect when ios_webviewType === `Ios_MSALWebviewType.DEFAULT` or\n   * ios_webviewType === `Ios_MSALWebviewType.AUTHENTICATION_SESSION`\n   * @platform iOS\n   */\n  ios_presentationStyle?: Ios_ModalPresentationStyle;\n}\n\n/**\n * See https://developer.apple.com/documentation/uikit/uimodalpresentationstyle\n */\nexport enum Ios_ModalPresentationStyle {\n  fullScreen = 0,\n  pageSheet,\n  formSheet,\n  currentContext,\n  custom,\n  overFullScreen,\n  overCurrentContext,\n  popover,\n  blurOverFullScreen,\n  none = -1,\n  automatic = -2,\n}\n\n/**\n * See https://azuread.github.io/microsoft-authentication-library-for-objc/Enums/MSALWebviewType.html\n */\nexport enum Ios_MSALWebviewType {\n  DEFAULT = 0,\n  AUTHENTICATION_SESSION,\n  SAFARI_VIEW_CONTROLLER,\n  WK_WEB_VIEW,\n}\n"]}